<html lang="en">
	<head>
		<meta charset="utf-8">

		<title>A simple gest.js demo that displays the gesture direction on screen</title>

		<meta name = "description" content = "gest.js is a webcam based gesture recognition library that helps developers build more immersive webpages">
		<meta name = "author" content = "Hadi Michael (http://hadi.io)">
		
		<!-- include js -->
		<script src='/static/js/gest.js'></script>
		<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
		<!-- <script src="/static/js/jsRev.js" type="text/javascript"></script> -->
		<link rel="stylesheet" type="text/css" href="/static/css/style.css">
	</head>

	<body>
		<!-- diplay events on screen for DEMO purposes -->
		<div class="stage">
			<h1 style='color:white; line-height:500px; font-size: 90pt;'id="timer"></h1>
			<h1 id='score' style='color: white; position: relative; top: 450px; border-top: 1px solid white; padding-top: 5px;'>0</h1>

		</div> <!-- ENDS .STAGE -->
		<!-- add controls in audio tag to see control bar -->
		<audio id='audio'> 
			<source src='/static/img/music.mp3' type='audio/mpeg'>
		</audio>
		
		<div id="controls">
			<img id="left" src="/static/img/arrows/staticLeft.png">
			<img id="up" src="/static/img/arrows/staticUp.png">
			<img id="down" src="/static/img/arrows/staticDown.png">
			<img id="right" src="/static/img/arrows/staticRight.png">
		</div> <!-- ENDS #CONTROLS -->
		<button id='start'>Start</button>
		<script type="text/javascript">
			//create message container
			var messageContainer = document.createElement('div');
			messageContainer.className = 'gest-message';
			document.body.appendChild(messageContainer);
			
			var styles = {
				positioning: 'margin: 22% auto; min-width: 100px; max-width: 400px; width: 80%; padding: 15px;',
				copy: 'font: normal 35px/1.1 \"Helvetica Neue\", Helvetica, Arial, sans-serif; color: #fff; font-size: 45px; text-align: center;',
				general: 'display: block; background-color: #000; z-index: 100; border-radius: 10px;'
			},
				messageContainerStyle = styles.positioning + styles.copy + styles.general;
	
			// gest.options.subscribeWithCallback(function(gesture) {
			// 	var message = '';
			// 	if (gesture.direction) {
			// 		message = gesture.direction;
			// 		console.log(gesture.direction)
			// 	} else {
			// 		message = gesture.error.message;
			// 	} 

			// 	messageContainer.innerHTML = '<p style=\"margin:0\">' + message + '</p>';
			// 	messageContainer.setAttribute('style', messageContainerStyle);

			// 	window.setTimeout(function() {
			// 		messageContainer.setAttribute('style', 'display: none;');
			// 	}, 3000);
			// });

			// gest.start();

		// 'notes' to store Arrows  
var notes = [];


// ==== CLASS FOR ARROWS ==== //

// 1. Direction of arrows
// 2. jQuery img that links to direction bottom
// 3. Destroy when it arrow gets to the 
// 4. Explode when arrow gets to the bottom

// Class Arrow
function Arrow(direction) {

	// CSS spacings for the arrows //
	var xPos = null;

	if (direction == 'left') {
		xPos = '115px'
	} else if (direction == 'up') {
		xPos = '182px'
	} else if (direction == 'down') {
		xPos = '252px'
	} else if (direction == 'right') {
		xPos = '322px'
	}

	this.direction = direction;
	this.image = $("<img src='/static/img/arrows/" + direction + ".gif'/>");

	this.image.css({
		position: "absolute",
		top: "450px",
		left: xPos
	});

	$('.stage').append(this.image);

}// ends CLASS Arrow

// To enable animating the arrows
Arrow.prototype.step = function() {

	// Controls the speed of the arrows
	this.image.css("top", "-=2px");

};

// Deletes arrows when they get to bottom of page
Arrow.prototype.destroy = function() {

	// removes the image of the DOM
	this.image.remove();

	// Removes the note/arrow from memory/array
	notes.splice(0,1);

};

// Explodes arrow when hit
Arrow.prototype.explode = function() {

	this.image.remove();

};



// For random arrows
var randNum = 0;

// Frame increasing
var frame = 0;

// Determines the speed of notes
var arrowSpawnRate = 40;


// Random generator for arrows
function randomGen() {

	// Randomizes between 1 and 4
	r = Math.floor(Math.random() * 4) + 1;
	if (r === 1) {
		notes.push(new Arrow("left"));
	} else if (r === 2) {
		notes.push(new Arrow("right"));
	} else if (r === 3) {
		notes.push(new Arrow("up"));	
	} else if (r === 4) {
		notes.push(new Arrow("down"));
	}

}// ends randomGen()


// Render function //
function render() {
	if (frame++ % arrowSpawnRate === 0) {
		randomGen();
	}

	// Animate arrows showering down //
	for (var i = 0; i < notes.length; i++ ) {
		notes[i].step();

		// Check for cleanup
		if (notes[i].image.position().top < -10) {

			notes[i].destroy();

		}

	}

}// ends render()



// jQuery to animate arrows //
$(document).ready(function () {

	// shim layer with setTimeout fallback
	window.requestAnimFrame = (function() {

		return window.requestAnimationFrame ||

		window.webkitRequestAnimationFrame ||

		window.mozRequestAnimationFrame ||

		function(callback) {

			window.setTimeout(callback, 40 / 75);

		};

	})();

	/*	place the rAF *before* the render() 
		to assure as close to 60fps with the 
		setTimeout fallback.					*/

	// Infinte loop for game play
	// (function animloop() {

	// 	requestAnimFrame(animloop);

	// 	render();

	// })();// ends (function animloop() )





	$('#start').on('click', function() {
		i = 5;
		var game = setInterval(function() {
			i--;
			console.log(i)
			if (i == 4) {
				$('#timer').html("READY!")	
			} else if (i > 0) {
				$('#timer').html(i)
			} else {
				$('#timer').html('')
				$('#start').attr('disabled', true)
			}
			if (i == 0) {
				var counter = 0;
				var loop = setInterval(function() {
					counter++
					// console.log("Counter = ", counter)
					if (counter == 850) {
						$('#timer').html('3');
					} else if (counter == 900) {
						$('#timer').html('2');
					} else if (counter == 950) {
						$('#timer').html('1');
					}
					if (counter < 1000) {
						$('#audio')[0].play();
						render();
					} else {
						$('#timer').html('');
						$('.stage').html('')
						$('#audio')[0].pause();
						clearInterval(loop)
					}
				}, 20, counter);
			}
			if (i == -1) {
				clearInterval(game);
			}
		}, 1000)
	})
});// ends $(doc).ready



// Listening for when the key is pressed
// $(document).keydown( function(event) {
// 	for (var i = 0; i < notes.length; i++) {
// 			console.log(notes[i].image.position().top);
// 		if (event.keyCode == 37 && notes[i].direction == "left") {
// 			if (notes[i].image.position().top > 0 && notes[i].image.position().top < 40) {
// 				console.log("LEFT! "+notes[i].explode());
// 			}			
// 		}
// 		if (event.keyCode == 38 && notes[i].direction == "up") {
// 			if (notes[i].image.position().top > 0 && notes[i].image.position().top < 40) {				
// 				console.log("UP! "+notes[i].explode());
// 			}
// 		}
// 		if (event.keyCode == 40 && notes[i].direction == "down") {
// 			if (notes[i].image.position().top > 0 && notes[i].image.position().top < 40) {				
// 				console.log("DOWN! "+notes[i].explode());
// 			}
// 		}
// 		if (event.keyCode == 39 && notes[i].direction == "right") {
// 			if (notes[i].image.position().top > 0 && notes[i].image.position().top < 40) {				
// 				console.log("RIGHT! "+notes[i].explode());
// 			}
// 		}
// 	}// ends loop

// });// ends $(doc).keyup
			score = 0;
			gest.options.subscribeWithCallback(function(gesture) {
				console.log(gesture.direction)
				var streak = false;
				for (var i = 0; i < notes.length; i++) {
					// console.log(notes[i].image.position().top);
					console.log(score)
	
					$('#score').html(score)
					if (gesture.direction == 'Left' && notes[i].direction == "left") {
						if (notes[i].image.position().top > 0 && notes[i].image.position().top < 40) {
							console.log("Left: ", streak);
							if (streak) {
								score+= 10;
							}
							streak = true;
							notes[i].explode();
							score+=10;
						}
					} else if ((gesture.direction == 'Up' || gesture.direction == 'Long up') && notes[i].direction == "up") {
						if (notes[i].image.position().top > 0 && notes[i].image.position().top < 40) {	
							console.log("Up: ", streak);
							if (streak) {
								score+= 10;
							}
							streak = true;			
							notes[i].explode();
							score+=10;
						} 
					} else if ((gesture.direction == 'Down' || gesture.direction == 'Long down') && notes[i].direction == "down") {
						if (notes[i].image.position().top > 0 && notes[i].image.position().top < 40) {
							console.log("Down: ", streak);
							if (streak) {
								score+= 10;
							}	
							streak = true;		
							notes[i].explode();
							score+=10;
						} 
					} else if (gesture.direction == 'Right' && notes[i].direction == "right") {
						if (notes[i].image.position().top > 0 && notes[i].image.position().top < 40) {
							console.log("Right: ", streak);
							if (streak) {
								score+= 10;
							}
							streak = true;				
							notes[i].explode();
							score+=10;
						} 
					} else {
						console.log(gesture.direction)
						// score-=10;
					}
				}
				// var message = '';
				// if (gesture.direction) {
				// 	message = gesture.direction;
				// 	console.log(gesture.direction)
				// } else {
				// 	message = gesture.error.message;
				// } 

				// messageContainer.innerHTML = '<p style=\"margin:0\">' + message + '</p>';
				// messageContainer.setAttribute('style', messageContainerStyle);

				// window.setTimeout(function() {
				// 	messageContainer.setAttribute('style', 'display: none;');
				// }, 3000);
			});

			gest.start();
</script>

		
	</body>
</html>
